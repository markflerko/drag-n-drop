{"version":3,"sources":["components/Canvas.tsx","utils/drawing.ts","components/ExportJSONButton.tsx","components/ImportJSONButton.tsx","components/MovedFigure/MovedFigure.tsx","initialStateValues/initialStateValues.ts","utils/useDOMElemetCoords.ts","utils/utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Canvas","figuresData","canvas","useLayoutEffect","context","current","getContext","clearRect","width","height","forEach","item","beginPath","strokeStyle","lineWidth","name","rect","x","y","stroke","fillStyle","fillRect","arc","Math","PI","fill","selected","drawing","ref","className","id","ExportJSONButton","exportLink","useRef","href","onClick","text","file","Blob","type","URL","createObjectURL","download","JSON","stringify","ImportJSONButton","deleteFiguresData","setFiguresData","importInput","htmlFor","onChange","e","target","files","length","reader","FileReader","readAsText","onload","parse","result","MovedFigure","top","left","figureType","isShow","style","initialCoords","bottom","right","initialDragStartData","shiftX","shiftY","initialFigure","initialUnderMouseCoords","useDOMElementCoords","initialValue","elementRef","useState","elementCoords","setElementCoords","getBoundingClientRect","getUpperFigure","event","canvasCoords","clientX","clientY","slice","reverse","find","element","x1","y1","r","sqrt","isInside","isMouseInCanvas","App","figures","circleCoords","circle","squareCoords","square","dragStartData","setDragStartData","movableElement","setMovableElement","mode","setMode","underMouseCoords","setUnderMouseCoords","showFigure","setShowFigure","useEffect","localStorage","setItem","removeFigure","arr","filter","figure","move","movableElementCoords","getMovableElementCoords","onMouseUp","onDragEnd","figuresDataUpdated","map","newFigure","Date","now","getNewFigure","onDragStart","calculateShifts","onMouseDown","upperFigure","figuresDataSelected","push","select","onMouseMove","leftCoordsOfFigureUnderMouse","topCoordsOfFigureUnderMouse","draggable","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","data","getItem","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d6c492c.chunk.js","sourcesContent":["import React, { useLayoutEffect } from 'react'\r\nimport { FigureType } from '../types'\r\nimport { drawing } from '../utils/drawing'\r\n\r\ntype CanvasProps = {\r\n  figuresData: Array<FigureType>\r\n  canvas: React.RefObject<HTMLCanvasElement>\r\n}\r\n\r\nexport const Canvas = ({ figuresData, canvas }: CanvasProps) => {\r\n  useLayoutEffect(() => {\r\n    const context = (canvas.current as HTMLCanvasElement).getContext('2d') as CanvasRenderingContext2D\r\n    context.clearRect(0, 0, canvas.current!.width, canvas.current!.height)\r\n\r\n    drawing({ context, figuresData })\r\n  }, [figuresData])\r\n\r\n  return <canvas ref={canvas} className=\"canvasContainer\" id=\"canvas\" width=\"800\" height=\"800\"></canvas>\r\n}\r\n","import { FigureType } from './../types';\r\n\r\ntype DrawingType = {\r\n  figuresData: Array<FigureType>,\r\n  context: CanvasRenderingContext2D\r\n}\r\n\r\nexport const drawing = ({figuresData, context}: DrawingType): void => {\r\n  figuresData.forEach((item) => {\r\n    context.beginPath()\r\n    context.strokeStyle = 'black'\r\n    context.lineWidth = 1\r\n    if (item.name === 'square') {\r\n      context.rect(item.x, item.y, item.width, item.height)\r\n      context.stroke()\r\n      context.fillStyle = 'blue'\r\n      context.fillRect(item.x, item.y, item.width, item.height)\r\n    } else if (item.name === 'circle') {\r\n      context.fillStyle = 'green'\r\n      context.arc(item.x, item.y, item.height / 2, 0, Math.PI * 2)\r\n      context.fill()\r\n    }\r\n    if (item.selected) {\r\n      context.strokeStyle = 'orangered'\r\n      context.lineWidth = 3\r\n    }\r\n    context.stroke()\r\n  })\r\n}\r\n","import React, { useRef } from 'react'\r\nimport { FigureType } from '../types'\r\n\r\ntype ExportJSONButtonProps = {\r\n  figuresData: Array<FigureType>\r\n}\r\n\r\nexport const ExportJSONButton = ({ figuresData }: ExportJSONButtonProps) => {\r\n  const exportLink = useRef<HTMLAnchorElement>(null)\r\n\r\n  const download = (text: BlobPart) => {\r\n    let file = new Blob([text], { type: 'application/json' })\r\n    exportLink.current!.href = URL.createObjectURL(file)\r\n    exportLink.current!.download = 'dogecoin.json'\r\n  }\r\n\r\n  const exportJSON = () => {\r\n    download(JSON.stringify(figuresData))\r\n  }\r\n\r\n  return (\r\n    <a href=\"\" className=\"export\" onClick={exportJSON} ref={exportLink}>\r\n      export JSON\r\n    </a>\r\n  )\r\n}\r\n","import React, { ChangeEvent, MutableRefObject, useRef } from 'react'\r\nimport { FigureType } from '../types'\r\n\r\ntype ImportJSONButtonProps = {\r\n  deleteFiguresData: () => void\r\n  setFiguresData: (array: Array<FigureType>) => void\r\n}\r\n\r\nexport const ImportJSONButton = ({ deleteFiguresData, setFiguresData }: ImportJSONButtonProps) => {\r\n  const importInput: MutableRefObject<null> = useRef(null)\r\n\r\n  const importJSON = (e: ChangeEvent<HTMLInputElement>) => {\r\n    deleteFiguresData()\r\n\r\n    if (e.target.files?.length) {\r\n      const file = e.target.files[0]    \r\n\r\n      let reader = new FileReader()\r\n      reader.readAsText(file)\r\n  \r\n      reader.onload = () => {\r\n        setFiguresData(JSON.parse(reader.result as string))\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <label className=\"import__label\" htmlFor=\"import\">\r\n        import JSON\r\n        <input type=\"file\" id='import' className=\"import\" ref={importInput} onChange={importJSON}></input>\r\n      </label>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport './MovedFigure.css'\r\n\r\ntype MovedFigureProps = {\r\n  top: number,\r\n  left: number,\r\n  figureType: string,\r\n  isShow: boolean\r\n}\r\n\r\nexport const MovedFigure = ({ top, left, figureType, isShow }: MovedFigureProps) => {\r\n  if (!isShow) return null\r\n\r\n  return (\r\n    <div\r\n      className={`${figureType}UnderMouse draggable`}\r\n      style={{\r\n        top,\r\n        left,\r\n      }}\r\n    ></div>\r\n  )\r\n}\r\n","export const initialCoords = {\r\n  height: 0,\r\n  width: 0,\r\n  top: 0,\r\n  left: 0,\r\n  bottom: 0,\r\n  right: 0,\r\n  x: 0,\r\n  y: 0\r\n}\r\n\r\nexport const initialDragStartData = {\r\n  shiftX: 0,\r\n  shiftY: 0,\r\n  name: ''\r\n}\r\n\r\nexport const initialFigure = {\r\n  x: 0,\r\n  y: 0,\r\n  name: '',\r\n  width: 0,\r\n  height: 0,\r\n  id: 0,\r\n  selected: false,\r\n  shiftX: 0,\r\n  shiftY: 0,\r\n}\r\n\r\nexport const initialUnderMouseCoords = {\r\n    top: 0,\r\n    left: 0,\r\n}\r\n","import { useLayoutEffect, useRef, useState } from 'react';\r\nimport { initialCoords } from './../initialStateValues/initialStateValues';\r\n\r\n\r\nexport const useDOMElementCoords = <T extends HTMLElement>(initialValue: typeof initialCoords) =>  {\r\n  const elementRef = useRef<T>(null)\r\n  const [elementCoords, setElementCoords] = useState(initialValue)\r\n\r\n  useLayoutEffect(() => {\r\n    setElementCoords((elementRef.current as T).getBoundingClientRect())\r\n  }, [elementRef])\r\n\r\n  return [elementCoords, elementRef] as [typeof elementCoords, typeof elementRef]\r\n}\r\n","import { CoordsType, FigureType } from './../types'\r\n\r\ntype IsInsideType = {\r\n  element: FigureType\r\n  x: number\r\n  y: number\r\n}\r\n\r\nconst isInside = ({ element, x, y }: IsInsideType): boolean => {\r\n  const { name, x: x1, y: y1, width, height } = element\r\n\r\n  if (name === 'square') {\r\n    return x >= x1 && y >= y1 && x <= x1 + width && y <= y1 + height\r\n  }\r\n\r\n  if (name === 'circle') {\r\n    let r = height / 2\r\n    return x >= x1 - r && x <= x1 + r && y >= y1 - r && y <= y1 + r && Math.sqrt((x - x1) ** 2 + (y - y1) ** 2) < r\r\n  }\r\n\r\n  return false\r\n}\r\n\r\ntype GetUpperFigureType = {\r\n  figuresData: Array<FigureType>\r\n  event: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n  canvasCoords: CoordsType\r\n}\r\n\r\nexport const getUpperFigure = ({ figuresData, event, canvasCoords }: GetUpperFigureType): FigureType | null => {\r\n  const x = event.clientX - canvasCoords.x\r\n  const y = event.clientY - canvasCoords.y\r\n\r\n  return (\r\n    figuresData\r\n      .slice()\r\n      .reverse()\r\n      .find((element) => isInside({ element, x, y })) || null\r\n  )\r\n}\r\n\r\ntype IsMouseInCanvasType = {\r\n  clientX: number\r\n  clientY: number\r\n  top: number\r\n  left: number\r\n  bottom: number\r\n  right: number\r\n}\r\n\r\nexport const isMouseInCanvas = ({ clientX, clientY, top, left, bottom, right }: IsMouseInCanvasType): boolean => {\r\n  return clientX > right || clientY > bottom || clientX < left || clientY < top\r\n}\r\n\r\ntype MovableElementCoordsType = {\r\n  x: number\r\n  y: number\r\n}\r\n\r\ntype GetMovableElementCoordsType = {\r\n  clientX: number\r\n  clientY: number\r\n  canvasCoords: CoordsType\r\n  movableElement: FigureType\r\n}\r\n\r\nexport const getMovableElementCoords = ({\r\n  clientX,\r\n  clientY,\r\n  movableElement,\r\n  canvasCoords,\r\n}: GetMovableElementCoordsType): MovableElementCoordsType => {\r\n  let x = clientX - canvasCoords.x + movableElement.shiftX\r\n  let y = clientY - canvasCoords.y + movableElement.shiftY\r\n\r\n  if (movableElement.name === 'square') {\r\n    x = x <= 0 ? 0 : x >= canvasCoords.width - movableElement.width ? canvasCoords.width - movableElement.width : x\r\n\r\n    y = y <= 0 ? 0 : y >= canvasCoords.height - movableElement.height ? canvasCoords.height - movableElement.height : y\r\n  } else if (movableElement.name === 'circle') {\r\n    const r = movableElement.height / 2\r\n    x = x <= r ? r : x >= canvasCoords.width - r ? canvasCoords.width - r : x\r\n\r\n    y = y <= r ? r : y >= canvasCoords.height - r ? canvasCoords.height - r : y\r\n  }\r\n\r\n  return { x, y }\r\n}\r\n\r\ntype SelectType = {\r\n  upperFigure: FigureType\r\n  figuresData: Array<FigureType>\r\n}\r\n\r\nexport const select = ({ upperFigure, figuresData }: SelectType): Array<FigureType> => {\r\n  const figuresDataSelected = figuresData\r\n    .filter((figure) => figure.id !== upperFigure.id)\r\n    .map((item) => ({ ...item, selected: false }))\r\n\r\n  figuresDataSelected.push({ ...upperFigure, selected: true })\r\n  return figuresDataSelected\r\n}\r\n\r\ntype CalculateShiftsType = {\r\n  name: string\r\n  squareCoords: CoordsType\r\n  circleCoords: CoordsType\r\n  canvasCoords: CoordsType\r\n  clientX: number\r\n  clientY: number\r\n}\r\n\r\ntype MovableElementShiftsType = {\r\n  shiftX: number\r\n  shiftY: number\r\n}\r\n\r\nexport const calculateShifts = ({\r\n  name,\r\n  squareCoords,\r\n  circleCoords,\r\n  canvasCoords,\r\n  clientX,\r\n  clientY,\r\n}: CalculateShiftsType): MovableElementShiftsType => {\r\n  let shiftX = 0\r\n  let shiftY = 0\r\n\r\n  if (name === 'square') {\r\n    shiftX = squareCoords.x - clientX - canvasCoords.x\r\n    shiftY = squareCoords.y - clientY - canvasCoords.y\r\n  } else if (name === 'circle') {\r\n    shiftX = circleCoords.x + circleCoords.width / 2 - clientX - canvasCoords.x\r\n    shiftY = circleCoords.y + circleCoords.height / 2 - clientY - canvasCoords.y\r\n  }\r\n\r\n  return {\r\n    shiftX,\r\n    shiftY,\r\n  }\r\n}\r\n\r\nexport const getNewFigure = (x: number, y: number, name: string): FigureType => ({\r\n  x,\r\n  y,\r\n  name,\r\n  width: 150,\r\n  height: 100,\r\n  id: Date.now(),\r\n  selected: true,\r\n  shiftX: 0,\r\n  shiftY: 0,\r\n})\r\n","import React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\nimport { Canvas } from './components/Canvas'\r\nimport { ExportJSONButton } from './components/ExportJSONButton'\r\nimport { ImportJSONButton } from './components/ImportJSONButton'\r\nimport { MovedFigure } from './components/MovedFigure/MovedFigure'\r\nimport {\r\n  initialCoords,\r\n  initialDragStartData,\r\n  initialFigure,\r\n  initialUnderMouseCoords\r\n} from './initialStateValues/initialStateValues'\r\nimport { FigureType } from './types'\r\nimport { useDOMElementCoords } from './utils/useDOMElemetCoords'\r\nimport {\r\n  calculateShifts,\r\n  getMovableElementCoords,\r\n  getNewFigure,\r\n  getUpperFigure,\r\n  isMouseInCanvas,\r\n  select\r\n} from './utils/utils'\r\n\r\ntype AppType = {\r\n  figures: Array<FigureType>\r\n}\r\n\r\nexport function App({ figures }: AppType) {\r\n  const [circleCoords, circle] = useDOMElementCoords<HTMLDivElement>(initialCoords)\r\n  const [squareCoords, square] = useDOMElementCoords<HTMLDivElement>(initialCoords)\r\n  const [canvasCoords, canvas] = useDOMElementCoords<HTMLCanvasElement>(initialCoords)\r\n\r\n  const [dragStartData, setDragStartData] = useState(initialDragStartData)\r\n  const [figuresData, setFiguresData] = useState(figures)\r\n\r\n  const [movableElement, setMovableElement] = useState(initialFigure)\r\n  const [mode, setMode] = useState('')\r\n\r\n  const [underMouseCoords, setUnderMouseCoords] = useState(initialUnderMouseCoords)\r\n  const [showFigure, setShowFigure] = useState(false)\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('figures-canvas-position', JSON.stringify(figuresData))\r\n  }, [figuresData])\r\n\r\n  const handleDragStart = (event: React.DragEvent<HTMLDivElement>) => {\r\n    const name = (event.target as HTMLDivElement).id\r\n    const { clientX, clientY } = event\r\n\r\n    const { shiftX, shiftY } = calculateShifts({ name, squareCoords, circleCoords, canvasCoords, clientX, clientY })\r\n\r\n    setDragStartData({ shiftX, shiftY, name })\r\n  }\r\n\r\n  const handleDragEnd = (event: React.DragEvent<HTMLDivElement>) => {\r\n    const x = event.clientX + dragStartData.shiftX\r\n    const y = event.clientY + dragStartData.shiftY\r\n    const { name } = dragStartData\r\n\r\n    const figuresDataUpdated = figuresData.map((item) => ({ ...item, selected: false }))\r\n    const newFigure = getNewFigure(x, y, name)\r\n\r\n    setFiguresData([...figuresDataUpdated, newFigure])\r\n  }\r\n\r\n  const handleMouseDown = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    const upperFigure = getUpperFigure({ figuresData, event, canvasCoords })\r\n\r\n    if (upperFigure) {\r\n      const figuresDataSelected = select({ upperFigure, figuresData })\r\n      setFiguresData(figuresDataSelected)\r\n\r\n      const shiftX = upperFigure.x - (event.clientX - canvasCoords.x)\r\n      const shiftY = upperFigure.y - (event.clientY - canvasCoords.y)\r\n      setMode('moveInsideCanvas')\r\n      setMovableElement({ ...upperFigure, shiftX, shiftY, selected: true })\r\n    }\r\n  }\r\n\r\n  const handleMouseMove = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    const { clientX, clientY } = event\r\n    const { top, bottom, left, right } = canvasCoords\r\n\r\n    if (mode === 'moveInsideCanvas') {\r\n      // set mode if only figure is moving\r\n      if (isMouseInCanvas({ clientX, clientY, top, bottom, left, right })) {\r\n        setMode('moveOutsideCanvas')\r\n      }\r\n\r\n      setShowFigure(false)\r\n      move(event)\r\n    } else if (mode === 'moveOutsideCanvas') {\r\n      // set mode if only figure is moving\r\n      if (!isMouseInCanvas({ clientX, clientY, top, bottom, left, right })) {\r\n        setMode('moveInsideCanvas')\r\n      }\r\n\r\n      setShowFigure(true)\r\n      move(event)\r\n\r\n      const leftCoordsOfFigureUnderMouse = event.clientX + movableElement.shiftX\r\n      const topCoordsOfFigureUnderMouse = event.clientY + movableElement.shiftY\r\n      setUnderMouseCoords({ left: leftCoordsOfFigureUnderMouse, top: topCoordsOfFigureUnderMouse })\r\n    }\r\n  }\r\n\r\n  const handleMouseUp = () => {\r\n    if (mode === 'moveInsideCanvas') {\r\n      setMode('')\r\n      setShowFigure(false)\r\n    } else if (mode === 'moveOutsideCanvas') {\r\n      setMode('')\r\n      setShowFigure(false)\r\n      removeFigure()\r\n    }\r\n  }\r\n\r\n  const removeFigure = () => {\r\n    setFiguresData((arr) => arr.filter((figure) => !figure.selected))\r\n  }\r\n\r\n  const move = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    const movableElementCoords = getMovableElementCoords({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      movableElement,\r\n      canvasCoords,\r\n    })\r\n\r\n    setFiguresData((arr) => [...arr.slice(0, -1), { ...movableElement, ...movableElementCoords }])\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"App\"\r\n      onMouseUp={handleMouseUp}\r\n      onDragEnd={handleDragEnd}\r\n      onDragStart={handleDragStart}\r\n      onMouseDown={handleMouseDown}\r\n      onMouseMove={handleMouseMove}\r\n    >\r\n      <MovedFigure\r\n        top={underMouseCoords.top}\r\n        left={underMouseCoords.left}\r\n        figureType={movableElement.name}\r\n        isShow={showFigure}\r\n      />\r\n      <div className=\"grid\">\r\n        <div className=\"figuresTitle\" id=\"figuresTitle\">\r\n          figures\r\n        </div>\r\n        <div className=\"canvasTitle\" id=\"canvasTitle\">\r\n          canvas\r\n        </div>\r\n\r\n        <div className=\"figures\" id=\"figures\">\r\n          <div className=\"circle draggable\" id=\"circle\" draggable=\"true\" ref={circle}></div>\r\n          <div className=\"square draggable\" id=\"square\" draggable=\"true\" ref={square}></div>\r\n\r\n          <button className=\"button\" onClick={removeFigure} type=\"button\">\r\n            delete\r\n          </button>\r\n\r\n          <ExportJSONButton figuresData={figuresData} />\r\n          <ImportJSONButton deleteFiguresData={() => setFiguresData([])} setFiguresData={setFiguresData} />\r\n        </div>\r\n        <Canvas figuresData={figuresData} canvas={canvas} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { App } from './App'\r\nimport './index.css'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport { FigureType } from './types'\r\n\r\nlet data = localStorage.getItem('figures-canvas-position')\r\nlet figures = [] as Array<FigureType>\r\n\r\nif (data) {\r\n  figures = figures.concat(JSON.parse(data))\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App figures={figures} />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}